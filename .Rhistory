e1=0
e2=0
e3=0
#Entrada de Dados do Arquivo
n<-(30) #quantidade da amostra = 20
MC <- 2 #Monte Carlo(500) colocar 1000 ou 3000
#verificar se precisa fazer um Monte Carlo para escolha dos betas
B0 <- 2
B1 <- 2.5
ResdInt = matrix(0,MC,n*2)
#Inicio do LOOP de Monte Carlo
#for (a in 1:MC){
residuo=NULL
aux=NULL
ResdIntervalar=NULL
#  E <- runif(n,min=-5,max=5)
# E <- rnorm(n,mean=0,sd=1)
E =rnorm(n,0,1)
E2 = rnorm(n,0,5)
#Obteção do Vetor aleatório do centro e range
XC  = runif(n,min=20,max=40)
XR  = runif(n,min=1,max=5)
YC= 1+ 2*XC+E
YR= 10+E2
#YC  = B0 + B1*XC+ E
#YR  = B0 + B1*XR+ E
#Matriz
Matriz  <- cbind(XC,XR,YC,YR)
Treina2 = Matriz
#Gerar a matriz de entrada para ajuste da regressão
XC <- cbind(Treina2[,1])
YC <- cbind(Treina2[,3])
XR <- cbind(Treina2[,2])
YR <- cbind(Treina2[,4])
#Ajuste da Regressão usando as matrizes de XC e YC encontradas anteriormente
RegressaoC <- lm(YC ~ XC)
coefiC<-coef(RegressaoC)
pesosC = RegressaoC$w
#Ajuste da Regressão usando as matrizes de XR e YR encontradas anteriormente
RegressaoR <- lm(YR ~ XR)
coefiR<-coef(RegressaoR)
pesosR = RegressaoR$w
xc1 <- Treina2[,1]
YcEst <- cbind(coefiC[1] + coefiC[2]*xc1)
xr1 <- Treina2[,2]
YrEst <- cbind(coefiR[1] + coefiR[2]*xr1)
ResdInt  = cbind((YC - YcEst) - ((YR - YrEst)/2),(YC - YcEst) + ((YR -YrEst)/2))
#ResdInt = cbind((TE_c - YcEst)*pesosC - ((TE_r - YrEst)/2)*pesosR,(TE_c - YcEst)*pesosC + ((TE_r - YrEst)/2)*pesosR)
####################################################################################
##Motando a Tabela de Residuos Intevalares
##ResdIntervalar possui comprimento 40 pois eh inf e sup
####################################################################################
MC = dim(ResdInt)[1]
for (i in 1:MC){
if (ResdInt[i,1] > ResdInt[i,2]){
aux = ResdInt[i,2]
ResdInt[i,2]=ResdInt[i,1]
ResdInt[i,1]=aux
cont = cont +1
}#fim do if
} # fim do for do i
#---------------------Gráficos ------------------------------
plot(XC,YC)
plot(XR,YR)
minimosX = NULL
maximosX = NULL
minimosY = NULL
maximosY = NULL
for (i in c(1:30)){
minimosX[i] = XC[i,]-XR[i,]/2
maximosX[i] = XC[i,]+XR[i,]/2
minimosY[i] = YC[i,]-YR[i,]/2
maximosY[i] = YC[i,]+YR[i,]/2
}
Plot.Rect <- function(XMIN,XMAX,YMIN,YMAX){
XCentro =(XMIN+XMAX)/2
YCentro=(YMIN+YMAX)/2
plot(XCentro,YCentro)
XRange=XMAX -XMIN
YRange=YMAX-YMIN
plot(XRange,YRange)
minX=min(XMIN)
maxX=max(XMAX)
minY=min(YMIN)
maxY=max(YMAX)
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab="X",ylab="Z",type="n")
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab=" Predict Interval ",ylab=" Interval Residual",type="n")
#plot(XRange,YRange,xlim=c(-2,15),ylim=c(-3,3),ylab="Ordinary Residuals",xlab="Predicted Interval",type="n")
plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),ylab="Y",xlab="X",type="n")
m=length(XMIN)
for(i in 1:m){
rect(XMIN[i], YMIN[i], XMAX[i], YMAX[i])
}#fim do for
}# fim da fun??o Plo.Rect
Plot.Rect(minimosX,maximosX,minimosY,maximosY)
Plot.Rect <- function(XMIN,XMAX,YMIN,YMAX){
XCentro =(XMIN+XMAX)/2
YCentro=(YMIN+YMAX)/2
XRange=XMAX -XMIN
YRange=YMAX-YMIN
minX=min(XMIN)
maxX=max(XMAX)
minY=min(YMIN)
print(minY)
maxY=max(YMAX)
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab="X",ylab="Z",type="n")
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab=" Predict Interval ",ylab=" Interval Residual",type="n")
#plot(XRange,YRange,xlim=c(-2,15),ylim=c(-3,3),ylab="Ordinary Residuals",xlab="Predicted Interval",type="n")
plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),ylab="Ordinary Residuals",xlab="Predicted Interval",type="n")
m=length(XMIN)
for(i in 1:m){
rect(XMIN[i], YMIN[i], XMAX[i], YMAX[i])
}#fim do for
}# fim da fun??o Plo.Rect
ResdCentro =(ResdInt[,1]+ResdInt[,2])/2
ResdRange=ResdInt[,2]-ResdInt[,1]
plot(YcEst,ResdCentro, ylab = 'Ordinary Residuals', xlab = 'Predicted Center')
plot(YrEst,ResdRange, ylab = 'Ordinary Residuals', xlab = 'Predicted Range')
MediaIntervalar=NULL
DesvioIntervalar1 = NULL
MediaIntervalar1 = (1/MC)*(((sum(ResdInt[,1]) + sum(ResdInt[,2]))/2))
M2=NULL
M2 = (1/(3*MC))*sum(ResdInt[,2]^2, ResdInt[,2]*ResdInt[,1], ResdInt[,1]^2)
DesvioIntervalar1 = sqrt(M2 - MediaIntervalar1^2)
DesvioInter = sdInterval(interval(ResdInt[,1],ResdInt[,2]))
for (i in 1:MC){
ResdInt[i,1]= (ResdInt[i,1])/DesvioInter
ResdInt[i,2]= (ResdInt[i,2])/DesvioInter
} ## fim do for
ResdCentro =(ResdInt[,1]+ResdInt[,2])/2
ResdRange=ResdInt[,2]-ResdInt[,1]
plot(YcEst,ResdCentro, ylab = 'Standardized Residuals', xlab = 'Predicted Center')
plot(YrEst,ResdRange, ylab = 'Standardized Residuals', xlab = 'Predicted Range')
rm(list=ls(all=TRUE))
set.seed(28)
library(ISLR)
library(dplyr)
library(readxl)
setwd("F:\\RAFAELLA\\Artigo EVASAO")
Dados <- read_excel("TX_EVASAO_FUND.xlsx", sheet=1, col_names=TRUE)
TE = as.numeric(Dados$TE)
IRD = as.numeric(Dados$IRD)
TDI = as.numeric(Dados$TDI)
DSU = as.numeric(Dados$DSU)
ICG = as.numeric(Dados$ICG)
ATU = as.numeric(Dados$ATU)
IED1 = as.numeric(Dados$IED1)
IED2 = as.numeric(Dados$IED2)
IED3 = as.numeric(Dados$IED3)
IED4 = as.numeric(Dados$IED4)
IED5 = as.numeric(Dados$IED5)
IED6 = as.numeric(Dados$IED6)
AFD1 = as.numeric(Dados$AFD1)
AFD2 = as.numeric(Dados$AFD2)
AFD3 = as.numeric(Dados$AFD3)
AFD4 = as.numeric(Dados$AFD4)
AFD5 = as.numeric(Dados$AFD5)
DadosEvasao = data.frame(IRD,TDI,ICG,DSU,ATU,IED1,IED2,IED3,IED4,IED5,IED6,AFD1,AFD2,AFD3,AFD4,AFD5,TE)
library(corrplot)
spearmanT =cor(DadosEvasao, method='spearman')
rm(list=ls(all=TRUE))
set.seed(28)
library(ISLR)
library(dplyr)
library(readxl)
setwd("F:\\RAFAELLA\\Artigo EVASAO")
Dados <- read_excel("TX_EVASAO_FUND.xlsx", sheet=1, col_names=TRUE)
TE = as.numeric(Dados$TE)
IRD = as.numeric(Dados$IRD)
TDI = as.numeric(Dados$TDI)
DSU = as.numeric(Dados$DSU)
ICG = as.numeric(Dados$ICG)
ATU = as.numeric(Dados$ATU)
IED1 = as.numeric(Dados$IED1)
IED2 = as.numeric(Dados$IED2)
IED3 = as.numeric(Dados$IED3)
IED4 = as.numeric(Dados$IED4)
IED5 = as.numeric(Dados$IED5)
IED6 = as.numeric(Dados$IED6)
AFD1 = as.numeric(Dados$AFD1)
AFD2 = as.numeric(Dados$AFD2)
AFD3 = as.numeric(Dados$AFD3)
AFD4 = as.numeric(Dados$AFD4)
AFD5 = as.numeric(Dados$AFD5)
DadosEvasao = data.frame(IRD,TDI,ICG,DSU,ATU,IED1,IED2,IED3,IED4,IED5,IED6,AFD1,AFD2,AFD3,AFD4,AFD5,TE)
library(corrplot)
spearmanT =cor(DadosEvasao, method='spearman')
rm(list=ls(all=TRUE))
set.seed(28)
library(ISLR)
library(dplyr)
library(readxl)
setwd("C:\\Users\\rafae\\Documents\\Rafaella\\Doutorado\\Artigos 2020\\Artigo EVASAO 2020")
Dados <- read_excel("TX_EVASAO_FUND.xlsx", sheet=1, col_names=TRUE)
TE = as.numeric(Dados$TE)
IRD = as.numeric(Dados$IRD)
TDI = as.numeric(Dados$TDI)
DSU = as.numeric(Dados$DSU)
ICG = as.numeric(Dados$ICG)
ATU = as.numeric(Dados$ATU)
IED1 = as.numeric(Dados$IED1)
IED2 = as.numeric(Dados$IED2)
IED3 = as.numeric(Dados$IED3)
IED4 = as.numeric(Dados$IED4)
IED5 = as.numeric(Dados$IED5)
IED6 = as.numeric(Dados$IED6)
AFD1 = as.numeric(Dados$AFD1)
AFD2 = as.numeric(Dados$AFD2)
AFD3 = as.numeric(Dados$AFD3)
AFD4 = as.numeric(Dados$AFD4)
AFD5 = as.numeric(Dados$AFD5)
DadosEvasao = data.frame(IRD,TDI,ICG,DSU,ATU,IED1,IED2,IED3,IED4,IED5,IED6,AFD1,AFD2,AFD3,AFD4,AFD5,TE)
library(corrplot)
spearmanT =cor(DadosEvasao, method='spearman')
spearmanT
regrassao1= lm(TE~., data = DadosEvasao)
regressao1= lm(TE~., data = DadosEvasao)
regressao2= lm(TE~AFD1+TDI, data = DadosEvasao)
regressao1= lm(TE~., data = DadosEvasao)
regressao2= lm(TE~AFD1+TDI, data = DadosEvasao)
plot(regressao1,1)
regressao1= lm(TE~., data = DadosEvasao)
regressao2= lm(TE~AFD1+TDI, data = DadosEvasao)
par(mfrow(1,2))
plot(regressao1,1)
plot(regressao2,1)
par(mfrow(1,2))
regressao1= lm(TE~., data = DadosEvasao)
regressao2= lm(TE~AFD1+TDI, data = DadosEvasao)
par(mfrow= c(1,2))
plot(regressao1,1)
plot(regressao2,1)
regressao1= lm(TE~., data = DadosEvasao)
regressao2= lm(TE~ATU+TDI, data = DadosEvasao)
par(mfrow= c(1,2))
plot(regressao1,1)
plot(regressao2,1)
summary(regressao1)
summary(regressao2)
summary(regressao1)
summary(regressao2)
regressao2= lm(TE~AFD1+TDI, data = DadosEvasao)
par(mfrow= c(1,2))
plot(regressao1,1)
plot(regressao2,1)
summary(regressao2)
summary(regressao1)
# Estudo dos Resíduos Intervalares RLI:CA
rm(list=ls(all=TRUE))
#Tamanho da Amostra
set.seed(10)
library(MASS)
library(stats)
library(base)
#Definição das variáveis
YcEst = NULL
YrEst = NULL
residuo=NULL
cont=0
Residuos=NULL
MatrizFinal = NULL
MatrizFinal2 = NULL
Residuos2=NULL
ResdIntCentro=NULL
ResdIntCentroMC=NULL
ResdIntCentroMCSort=NULL
e1=0
e2=0
e3=0
#Entrada de Dados do Arquivo
n<-(30) #quantidade da amostra = 20
MC <- 2 #Monte Carlo(500) colocar 1000 ou 3000
#verificar se precisa fazer um Monte Carlo para escolha dos betas
B0 <- 2
B1 <- 2.5
ResdInt = matrix(0,MC,n*2)
#Inicio do LOOP de Monte Carlo
#for (a in 1:MC){
residuo=NULL
aux=NULL
ResdIntervalar=NULL
#  E <- runif(n,min=-5,max=5)
# E <- rnorm(n,mean=0,sd=1)
E =rnorm(n,0,1)
E2 = rnorm(n,0,1)
#Obteção do Vetor aleatório do centro e range
XC  = runif(n,min=20,max=40)
XR  = runif(n,min=1,max=5)
YC= 1+ 2*XC+E
YR= 10+E2
Matriz  <- cbind(XC,XR,YC,YR)
Treina2 = Matriz
#Gerar a matriz de entrada para ajuste da regressão
XC <- cbind(Treina2[,1])
YC <- cbind(Treina2[,3])
XR <- cbind(Treina2[,2])
YR <- cbind(Treina2[,4])
#Ajuste da Regressão usando as matrizes de XC e YC encontradas anteriormente
RegressaoC <- lm(YC ~ XC)
coefiC<-coef(RegressaoC)
pesosC = RegressaoC$w
#Ajuste da Regressão usando as matrizes de XR e YR encontradas anteriormente
RegressaoR <- lm(YR ~ XR)
coefiR<-coef(RegressaoR)
pesosR = RegressaoR$w
xc1 <- Treina2[,1]
YcEst <- cbind(coefiC[1] + coefiC[2]*xc1)
xr1 <- Treina2[,2]
YrEst <- cbind(coefiR[1] + coefiR[2]*xr1)
ResdInt  = cbind((YC - YcEst) - ((YR - YrEst)/2),(YC - YcEst) + ((YR -YrEst)/2))
#ResdInt = cbind((TE_c - YcEst)*pesosC - ((TE_r - YrEst)/2)*pesosR,(TE_c - YcEst)*pesosC + ((TE_r - YrEst)/2)*pesosR)
####################################################################################
##Motando a Tabela de Residuos Intevalares
##ResdIntervalar possui comprimento 40 pois eh inf e sup
####################################################################################
MC = dim(ResdInt)[1]
for (i in 1:MC){
if (ResdInt[i,1] > ResdInt[i,2]){
aux = ResdInt[i,2]
ResdInt[i,2]=ResdInt[i,1]
ResdInt[i,1]=aux
cont = cont +1
}#fim do if
} # fim do for do i
#---------------------Gráficos ------------------------------
plot(XC,YC)
plot(XR,YR)
minimosX = NULL
maximosX = NULL
minimosY = NULL
maximosY = NULL
for (i in c(1:30)){
minimosX[i] = XC[i,]-XR[i,]/2
maximosX[i] = XC[i,]+XR[i,]/2
minimosY[i] = YC[i,]-YR[i,]/2
maximosY[i] = YC[i,]+YR[i,]/2
}
Plot.Rect <- function(XMIN,XMAX,YMIN,YMAX){
XCentro =(XMIN+XMAX)/2
YCentro=(YMIN+YMAX)/2
plot(XCentro,YCentro)
XRange=XMAX -XMIN
YRange=YMAX-YMIN
plot(XRange,YRange)
minX=min(XMIN)
maxX=max(XMAX)
minY=min(YMIN)
maxY=max(YMAX)
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab="X",ylab="Z",type="n")
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab=" Predict Interval ",ylab=" Interval Residual",type="n")
#plot(XRange,YRange,xlim=c(-2,15),ylim=c(-3,3),ylab="Ordinary Residuals",xlab="Predicted Interval",type="n")
plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),ylab="Y",xlab="X",type="n")
m=length(XMIN)
for(i in 1:m){
rect(XMIN[i], YMIN[i], XMAX[i], YMAX[i])
}#fim do for
}# fim da fun??o Plo.Rect
Plot.Rect(minimosX,maximosX,minimosY,maximosY)
# Estudo dos Resíduos Intervalares RLI:CA
rm(list=ls(all=TRUE))
#Tamanho da Amostra
set.seed(10)
library(MASS)
library(stats)
library(base)
#Definição das variáveis
YcEst = NULL
YrEst = NULL
residuo=NULL
cont=0
Residuos=NULL
MatrizFinal = NULL
MatrizFinal2 = NULL
Residuos2=NULL
ResdIntCentro=NULL
ResdIntCentroMC=NULL
ResdIntCentroMCSort=NULL
e1=0
e2=0
e3=0
#Entrada de Dados do Arquivo
n<-(30) #quantidade da amostra = 20
MC <- 2 #Monte Carlo(500) colocar 1000 ou 3000
#verificar se precisa fazer um Monte Carlo para escolha dos betas
B0 <- 2
B1 <- 2.5
ResdInt = matrix(0,MC,n*2)
#Inicio do LOOP de Monte Carlo
#for (a in 1:MC){
residuo=NULL
aux=NULL
ResdIntervalar=NULL
#  E <- runif(n,min=-5,max=5)
# E <- rnorm(n,mean=0,sd=1)
E =rnorm(n,0,1)
E2 = rnorm(n,0,1)
#Obteção do Vetor aleatório do centro e range
XC  = runif(n,min=20,max=40)
XR  = runif(n,min=1,max=5)
YC= 1+ 2*XC+E
YR= 10+E2
#YC  = B0 + B1*XC+ E
#YR  = B0 + B1*XR+ E
#Matriz
Matriz  <- cbind(XC,XR,YC,YR)
Treina2 = Matriz
#Gerar a matriz de entrada para ajuste da regressão
XC <- cbind(Treina2[,1])
YC <- cbind(Treina2[,3])
XR <- cbind(Treina2[,2])
YR <- cbind(Treina2[,4])
#Ajuste da Regressão usando as matrizes de XC e YC encontradas anteriormente
RegressaoC <- lm(YC ~ XC)
coefiC<-coef(RegressaoC)
pesosC = RegressaoC$w
#Ajuste da Regressão usando as matrizes de XR e YR encontradas anteriormente
RegressaoR <- lm(YR ~ XR)
coefiR<-coef(RegressaoR)
pesosR = RegressaoR$w
xc1 <- Treina2[,1]
YcEst <- cbind(coefiC[1] + coefiC[2]*xc1)
xr1 <- Treina2[,2]
YrEst <- cbind(coefiR[1] + coefiR[2]*xr1)
ResdInt  = cbind((YC - YcEst) - ((YR - YrEst)/2),(YC - YcEst) + ((YR -YrEst)/2))
#ResdInt = cbind((TE_c - YcEst)*pesosC - ((TE_r - YrEst)/2)*pesosR,(TE_c - YcEst)*pesosC + ((TE_r - YrEst)/2)*pesosR)
####################################################################################
##Motando a Tabela de Residuos Intevalares
##ResdIntervalar possui comprimento 40 pois eh inf e sup
####################################################################################
MC = dim(ResdInt)[1]
for (i in 1:MC){
if (ResdInt[i,1] > ResdInt[i,2]){
aux = ResdInt[i,2]
ResdInt[i,2]=ResdInt[i,1]
ResdInt[i,1]=aux
cont = cont +1
}#fim do if
} # fim do for do i
#---------------------Gráficos ------------------------------
plot(XC,YC)
plot(XR,YR)
minimosX = NULL
maximosX = NULL
minimosY = NULL
maximosY = NULL
for (i in c(1:30)){
minimosX[i] = XC[i,]-XR[i,]/2
maximosX[i] = XC[i,]+XR[i,]/2
minimosY[i] = YC[i,]-YR[i,]/2
maximosY[i] = YC[i,]+YR[i,]/2
}
Plot.Rect <- function(XMIN,XMAX,YMIN,YMAX){
XCentro =(XMIN+XMAX)/2
YCentro=(YMIN+YMAX)/2
plot(XCentro,YCentro)
XRange=XMAX -XMIN
YRange=YMAX-YMIN
plot(XRange,YRange)
minX=min(XMIN)
maxX=max(XMAX)
minY=min(YMIN)
maxY=max(YMAX)
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab="X",ylab="Z",type="n")
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab=" Predict Interval ",ylab=" Interval Residual",type="n")
#plot(XRange,YRange,xlim=c(-2,15),ylim=c(-3,3),ylab="Ordinary Residuals",xlab="Predicted Interval",type="n")
plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),ylab="Y",xlab="X",type="n")
m=length(XMIN)
for(i in 1:m){
rect(XMIN[i], YMIN[i], XMAX[i], YMAX[i])
}#fim do for
}# fim da fun??o Plo.Rect
Plot.Rect(minimosX,maximosX,minimosY,maximosY)
MediaIntervalar=NULL
DesvioIntervalar1 = NULL
MediaIntervalar1 = (1/MC)*(((sum(ResdInt[,1]) + sum(ResdInt[,2]))/2))
M2=NULL
M2 = (1/(3*MC))*sum(ResdInt[,2]^2, ResdInt[,2]*ResdInt[,1], ResdInt[,1]^2)
DesvioIntervalar1 = sqrt(M2 - MediaIntervalar1^2)
DesvioInter = sdInterval(interval(ResdInt[,1],ResdInt[,2]))
for (i in 1:MC){
ResdInt[i,1]= (ResdInt[i,1])/DesvioInter
ResdInt[i,2]= (ResdInt[i,2])/DesvioInter
} ## fim do for
Plot.Rect <- function(XMIN,XMAX,YMIN,YMAX){
XCentro =(XMIN+XMAX)/2
YCentro=(YMIN+YMAX)/2
XRange=XMAX -XMIN
YRange=YMAX-YMIN
minX=min(XMIN)
maxX=max(XMAX)
minY=min(YMIN)
maxY=max(YMAX)
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab="X",ylab="Z",type="n")
#plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),xlab=" Predict Interval ",ylab=" Interval Residual",type="n")
#plot(XRange,YRange,xlim=c(-2,15),ylim=c(-3,3),ylab="Ordinary Residuals",xlab="Predicted Interval",type="n")
plot(XRange,YRange,xlim=c(minX,maxX),ylim=c(minY,maxY),ylab="Standardized Residuals",xlab="Predicted Interval",type="n")
m=length(XMIN)
for(i in 1:m){
rect(XMIN[i], YMIN[i], XMAX[i], YMAX[i])
}#fim do for
}# fim da fun??o Plo.Rect
YlEst =YcEst - YrEst/2 #para preditos
YsEst =YcEst + YrEst/2
xinf=cbind(YlEst)
xsup=cbind(YsEst)
yinf=cbind(ResdInt[,1])
ysup=cbind(ResdInt[,2])
Plot.Rect(xinf,xsup,yinf,ysup)
ResdCentro =(ResdInt[,1]+ResdInt[,2])/2
ResdRange=ResdInt[,2]-ResdInt[,1]
plot(YcEst,ResdCentro, ylab = 'Standardized Residuals', xlab = 'Predicted Center')
plot(YrEst,ResdRange, ylab = 'Standardized Residuals', xlab = 'Predicted Range')
